LOCAIS dos arquuivos: 
    Link GitHub: https://github.com/MateusVictorIderiha/2sem_prj_integrador
    Arquivos php devem ficar na raiz da pasta "site"
    Arquivos css devem ficar na pasta "site/css"
    Arquivos js devem ficar na pasta "site/js"
    Arquivos de midia devem ficar na pasta "site/midia"

HTML5:
    Não esquecer da semantica nas paginas e validar elas na w3c
    * Utilizar o elemento picture do html5 (Ele serve para as imagens ele deixa elas responsivas, 
assim deixando se encaixar melhor o layout e também o usuario baixar somente o necessario)
        Exemplo:
        <picture>
            <source media="(max-width: 720px)" srcset="img_150.jpg">
            <source media="(min-width: 720px)" srcset="img_720.jpg">
            <source media="(min-width: 1200px)" srcset="img_1200.jpg">
            <img src="img_720.jpg" alt="Imagem 1" style="width:auto;">
        </picture>
        <!--
        Quando a tela for até 720px ele vai usar a "img_150.jpg", e não vai baixar as outras, 
        se encaixando melhor no layout pois ela pode ser personalizada para esse tamanho especifico de tela, 
        ou não apenas ser menor e mais leve, pois ela não baixa as demais imagens. 
        O mesmo ocorre com os demais tamanhos.
        Ref: https://www.w3schools.com/tags/tag_picture.asp
        -->


CSS e Design:

    

PHP:
alguns dos padrões do projeto estão sendo baseados nas PSR, php standard recomendations(recomendações de padrões php) não são obrigatorias a 
serem seguidas, mas no grupo para a padronização de codigo e mais facil entendimento e comunicação entre os membros do grupo depois 
será estabelecidos este padrão.
    -> padrão de codificação dos arquivos é UTF-8
    -> as variaveis devem conter menos de 15 caracteres, tentar dar um nome pelo menos um pouco semantico a variavel
    -> Constantes devem estar com todas as letra em maiusculo e com underline nas palavras diferentes exemplo: VALOR_DE_PI
    -> as variaveis e nomes de funções devem estar todas em minusculo, se houver mais de uma palavra devem conteum underline: $tempo_km
    -> não há necessidade de fechamento da tag php nos arquivos de php puro, e elas devem conter um espaço em branco na ultima linha
    -> Código deve usar 4 espaços para recuo (Tabulação/indentação)
    -> todas as funções e configurações do devem estar separadas da execução logica. (um ou mais arquivos apenas para declaração de funções e outros apenas executando(chamando), ou seja um arquivo não deve fazer as duas coisas ao mesmo tempo)
    -> nos arquivos de declaração de funções ou configuração não devem ultrapassar mais de 80 caracteres
    -> Nas estruturas de controle(if, for, foreach, while...)
            deve haver um espaço apos a palavra chave da estrutura de controle
            antes da chave de abertura( "{" ) deve a ver um espaço
            a chave de fechamente deve estar na proxima linha depois do corpo
            exemplo:
                    <?php
                    if ($expr1) {
                            // if body
                    } elseif ($expr2) {
                            // elseif body
                    } else {
                            // else body;
                    }

    -> caso haja muitos argumentos pode-se dividir quebrando em linhas onde cada linha fica uma variavel e com uma indentação, o parenteses de fechamento e a chave de abertura ficam na mesma linha seguindo a indentação da abertura:
            <?php
            $longArgs_noVars = function (
                    $longArgument,
                    $longerArgument,
                    $muchLongerArgument
            ) {
                    // body
            };		
    <----------- // ------------->

    -> Todas as funções devem ser comentadas, não há necessidade de comentar funções nativas do php.
    os padrões a serem seguidos do comentario das funções são, esse estilo de documentação é feito pelo phpDocumentor ele gera 
    e ajuda a gerenciar a documentação do php mais tarde veremos como fica, mas ja para adiantar seria algo mais ou menos assim:
     <? php 
     / ** 
      * Um resumo informando ao usuário o que o elemento associado faz. 
      * 
      * Uma * descrição *, que pode abranger várias linhas, ir _in-depth_ para os detalhes desse elemento 
      * e fornecer algumas informações básicas ou referências textuais. 
      * 
      * @param string $myArgument Com uma * descrição * deste argumento, estes também podem 
      * abranger múltiplas linhas. 
      * 
      * @return void 
      * / 
      function  myFunction ( $ myArgument ) { 
      }
      tembém tem a tag para identificar o autor que @author.
